{"ast":null,"code":"var _jsxFileName = \"/home/song/serp_front/src/routes.js\";\nimport LoginGuard from 'src/components/LoginGuard';\nimport RouterGuard from 'src/components/RouterGuard';\nimport DashboardLayout from 'src/layouts/DashboardLayout';\nimport MenuView from 'src/views/errors/NotFoundView';\nimport CompanyInfoView from 'src/views/menu/CompanyInfoView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst routes = [{\n  path: \"/\",\n  element: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 25\n  }, this)\n}, {\n  path: \"dashboard\",\n  element: /*#__PURE__*/_jsxDEV(Dashboard, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 33\n  }, this)\n}, {\n  path: \"invoices\",\n  element: /*#__PURE__*/_jsxDEV(Invoices, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 14\n  }, this),\n  // 중첩 라우트의 경우도 Route에서와 같이 children이라는 property를 사용\n  children: [{\n    path: \":id\",\n    element: /*#__PURE__*/_jsxDEV(Invoice, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 31\n    }, this)\n  }, {\n    path: \"sent\",\n    element: /*#__PURE__*/_jsxDEV(SentInvoices, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 32\n    }, this)\n  }]\n}, // NotFound 페이지는 다음과 같이 구현할 수 있음\n{\n  path: \"*\",\n  element: /*#__PURE__*/_jsxDEV(NotFound, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 25\n  }, this)\n}];\nexport default routes; // const routes  = () => {\n//   const element = useRoutes([\n//     {\n//       path: \"/\",\n//       element: <MenuView />,\n//     }\n//   ]);\n//   return ( {element });\n// }\n// export default routes;\n// <React.Suspense fallback={<div>Loading...</div>}>\n//   <Routes>\n//     {\n//       routes.map((route, i) => {\n//         const RouteElement = route.element;\n//         const RouteLayout = route.layout || React.Fragment\n//         const RouteGuard = route.guard || React.Fragment;\n//         return (\n//           <Route key={i} path={route.path}\n//             element={\n//               <RouteGuard>\n//                 <RouteLayout>\n//                   <RouteElement />\n//                 </RouteLayout>\n//               </RouteGuard>\n//             }>\n//           </Route>\n//         )\n//       })\n//     }\n//   </Routes>\n// </React.Suspense>\n// export const routes = [\n//   {\n//     path: '/404',\n//     guard: RouterGuard,\n//     element: React.lazy(() => import('src/views/errors/NotFoundView')),\n//   },\n//   {\n//     path: '/login',\n//     guard: RouterGuard,\n//     element: React.lazy(() => import('src/views/signIn')),\n//   },\n//   // customize  routes\n//   {\n//     path: '/memu/*',\n//     guard: LoginGuard,\n//     layout: DashboardLayout,\n//     element: React.lazy(() => import('src/views/menu')),\n//     childs: [\n//       {\n//         path: '/CompanyInfo',\n//         element: React.lazy(() => import('src/views/menu/CompanyInfoView')),\n//       },\n//     ]\n//   },\n//   // define [redirect(=Navigate )]\n//   {\n//     path: \"/\",\n//     element: () => <Navigate replace to=\"/memu\" />\n//   },\n//   {\n//     path: \"/*\",\n//     element: () => <Navigate replace to=\"/404\" />\n//   }\n// ];","map":{"version":3,"names":["LoginGuard","RouterGuard","DashboardLayout","MenuView","CompanyInfoView","routes","path","element","children"],"sources":["/home/song/serp_front/src/routes.js"],"sourcesContent":["import LoginGuard from 'src/components/LoginGuard';\nimport RouterGuard from 'src/components/RouterGuard';\nimport DashboardLayout from 'src/layouts/DashboardLayout';\n\nimport MenuView from 'src/views/errors/NotFoundView';\nimport CompanyInfoView from 'src/views/menu/CompanyInfoView';\n\n\nconst  routes = [\n  { path: \"/\", element: <Home /> },\n  { path: \"dashboard\", element: <Dashboard /> },\n  {\n    path: \"invoices\",\n    element: <Invoices />,\n    // 중첩 라우트의 경우도 Route에서와 같이 children이라는 property를 사용\n    children: [\n      { path: \":id\", element: <Invoice /> },\n      { path: \"sent\", element: <SentInvoices /> }\n    ]\n  },\n  // NotFound 페이지는 다음과 같이 구현할 수 있음\n  { path: \"*\", element: <NotFound /> }\n];\n \n export default routes;\n// const routes  = () => {\n//   const element = useRoutes([\n//     {\n//       path: \"/\",\n//       element: <MenuView />,\n//     }\n//   ]);\n\n//   return ( {element });\n// }\n// export default routes;\n\n\n\n  // <React.Suspense fallback={<div>Loading...</div>}>\n  //   <Routes>\n  //     {\n  //       routes.map((route, i) => {\n  //         const RouteElement = route.element;\n  //         const RouteLayout = route.layout || React.Fragment\n  //         const RouteGuard = route.guard || React.Fragment;\n\n  //         return (\n  //           <Route key={i} path={route.path}\n  //             element={\n  //               <RouteGuard>\n  //                 <RouteLayout>\n  //                   <RouteElement />\n  //                 </RouteLayout>\n  //               </RouteGuard>\n  //             }>\n  //           </Route>\n  //         )\n  //       })\n  //     }\n  //   </Routes>\n  // </React.Suspense>\n\n\n\n// export const routes = [\n\n//   {\n//     path: '/404',\n//     guard: RouterGuard,\n//     element: React.lazy(() => import('src/views/errors/NotFoundView')),\n//   },\n//   {\n//     path: '/login',\n//     guard: RouterGuard,\n//     element: React.lazy(() => import('src/views/signIn')),\n//   },\n//   // customize  routes\n//   {\n//     path: '/memu/*',\n//     guard: LoginGuard,\n//     layout: DashboardLayout,\n//     element: React.lazy(() => import('src/views/menu')),\n    \n//     childs: [\n//       {\n//         path: '/CompanyInfo',\n//         element: React.lazy(() => import('src/views/menu/CompanyInfoView')),\n//       },\n//     ]\n//   },\n\n\n\n//   // define [redirect(=Navigate )]\n//   {\n//     path: \"/\",\n//     element: () => <Navigate replace to=\"/memu\" />\n//   },\n//   {\n//     path: \"/*\",\n//     element: () => <Navigate replace to=\"/404\" />\n//   }\n// ];"],"mappings":";AAAA,OAAOA,UAAP,MAAuB,2BAAvB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,eAAP,MAA4B,6BAA5B;AAEA,OAAOC,QAAP,MAAqB,+BAArB;AACA,OAAOC,eAAP,MAA4B,gCAA5B;;AAGA,MAAOC,MAAM,GAAG,CACd;EAAEC,IAAI,EAAE,GAAR;EAAaC,OAAO,eAAE,QAAC,IAAD;IAAA;IAAA;IAAA;EAAA;AAAtB,CADc,EAEd;EAAED,IAAI,EAAE,WAAR;EAAqBC,OAAO,eAAE,QAAC,SAAD;IAAA;IAAA;IAAA;EAAA;AAA9B,CAFc,EAGd;EACED,IAAI,EAAE,UADR;EAEEC,OAAO,eAAE,QAAC,QAAD;IAAA;IAAA;IAAA;EAAA,QAFX;EAGE;EACAC,QAAQ,EAAE,CACR;IAAEF,IAAI,EAAE,KAAR;IAAeC,OAAO,eAAE,QAAC,OAAD;MAAA;MAAA;MAAA;IAAA;EAAxB,CADQ,EAER;IAAED,IAAI,EAAE,MAAR;IAAgBC,OAAO,eAAE,QAAC,YAAD;MAAA;MAAA;MAAA;IAAA;EAAzB,CAFQ;AAJZ,CAHc,EAYd;AACA;EAAED,IAAI,EAAE,GAAR;EAAaC,OAAO,eAAE,QAAC,QAAD;IAAA;IAAA;IAAA;EAAA;AAAtB,CAbc,CAAhB;AAgBC,eAAeF,MAAf,C,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIE;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIF;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}