{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport { useEffect } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nconst client = axios.create({\n  baseURL: 'http://127.0.0.1:3001',\n  timeout: 1000,\n  withCredentials: true\n}); // 200 : 성공, 201 : 토큰 재발행, 400 : 인증 X(여러가지 이유),\n// 응답\n\nconst Interceptor = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const navigate = useNavigate();\n  useEffect(() => {\n    client.interceptors.response.use(function (response) {\n      return response;\n    }, async function (error) {\n      if (error.response && error.response.status === 400) {\n        try {\n          //  엑세스 토큰 만료\n          const originalRequest = error.config;\n          const data = await client.post('/refresh');\n\n          if (data.status == 201) {\n            // 엑세스만 재발행\n            const {\n              accessToken,\n              refreshToken\n            } = data.data.data;\n            localStorage.removeItem('user');\n            localStorage.setItem('user', JSON.stringify(data.data.data, ['email', 'accessToken', 'refreshToken']));\n            originalRequest.headers['Authorization'] = `Bearer ${accessToken}`;\n            originalRequest.headers['refreshToken'] = refreshToken;\n            return await client.request(originalRequest); // 재설정 및 원래 리퀘스트 \n          }\n        } catch (error) {\n          // [/refresh] 토큰 만료 또는 토큰 비정상 또는 헤더 없음\n          localStorage.removeItem('user');\n          navigate(\"/login\", {\n            replace: true\n          });\n          return;\n        }\n      } //  [/api (jwt_verify)]에서 오는 에러 코드  or 기존 요청 에러 코드\n\n\n      return Promise.reject(error);\n    });\n  }, []);\n  return children;\n};\n\n_s(Interceptor, \"0pNeyzXk/ByIxyERsdaIrG6js9s=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Interceptor;\nexport default client;\nexport { Interceptor };\n\nvar _c;\n\n$RefreshReg$(_c, \"Interceptor\");","map":{"version":3,"names":["axios","useEffect","useNavigate","client","create","baseURL","timeout","withCredentials","Interceptor","children","navigate","interceptors","response","use","error","status","originalRequest","config","data","post","accessToken","refreshToken","localStorage","removeItem","setItem","JSON","stringify","headers","request","replace","Promise","reject"],"sources":["/home/song/serp_front/src/utils/axios_api.js"],"sourcesContent":["import axios from 'axios';\nimport { useEffect } from 'react';\nimport { useNavigate } from \"react-router-dom\";\n\nconst client = axios.create(\n  {\n    baseURL : 'http://127.0.0.1:3001',\n    timeout: 1000,\n    withCredentials : true\n  }\n);\n\n\n// 200 : 성공, 201 : 토큰 재발행, 400 : 인증 X(여러가지 이유),\n\n// 응답\nconst Interceptor = ({children}) => {\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    client.interceptors.response.use(\n      function (response) {\n        \n        return response\n      },\n      async function (error) {\n        if (error.response && error.response.status === 400) {\n          try {\n            //  엑세스 토큰 만료\n            const originalRequest = error.config;\n            const data = await client.post('/refresh')\n    \n            if (data.status == 201) { // 엑세스만 재발행\n              const { accessToken, refreshToken } = data.data.data\n              localStorage.removeItem('user')\n              localStorage.setItem('user', JSON.stringify(data.data.data, ['email', 'accessToken', 'refreshToken']))\n              originalRequest.headers['Authorization'] = `Bearer ${accessToken}`;\n              originalRequest.headers['refreshToken'] = refreshToken;\n              return await client.request(originalRequest); // 재설정 및 원래 리퀘스트 \n            }\n          } catch (error) {\n            // [/refresh] 토큰 만료 또는 토큰 비정상 또는 헤더 없음\n            localStorage.removeItem('user');\n            navigate(\"/login\", { replace: true })\n            return;\n          }\n        }\n        //  [/api (jwt_verify)]에서 오는 에러 코드  or 기존 요청 에러 코드\n        return Promise.reject(error) \n      }\n    )\n  }, [])\n  return children;\n}\n\n\nexport default client;\nexport {Interceptor};"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,MAAM,GAAGH,KAAK,CAACI,MAAN,CACb;EACEC,OAAO,EAAG,uBADZ;EAEEC,OAAO,EAAE,IAFX;EAGEC,eAAe,EAAG;AAHpB,CADa,CAAf,C,CASA;AAEA;;AACA,MAAMC,WAAW,GAAG,QAAgB;EAAA;;EAAA,IAAf;IAACC;EAAD,CAAe;EAClC,MAAMC,QAAQ,GAAGR,WAAW,EAA5B;EAEAD,SAAS,CAAC,MAAM;IACdE,MAAM,CAACQ,YAAP,CAAoBC,QAApB,CAA6BC,GAA7B,CACE,UAAUD,QAAV,EAAoB;MAElB,OAAOA,QAAP;IACD,CAJH,EAKE,gBAAgBE,KAAhB,EAAuB;MACrB,IAAIA,KAAK,CAACF,QAAN,IAAkBE,KAAK,CAACF,QAAN,CAAeG,MAAf,KAA0B,GAAhD,EAAqD;QACnD,IAAI;UACF;UACA,MAAMC,eAAe,GAAGF,KAAK,CAACG,MAA9B;UACA,MAAMC,IAAI,GAAG,MAAMf,MAAM,CAACgB,IAAP,CAAY,UAAZ,CAAnB;;UAEA,IAAID,IAAI,CAACH,MAAL,IAAe,GAAnB,EAAwB;YAAE;YACxB,MAAM;cAAEK,WAAF;cAAeC;YAAf,IAAgCH,IAAI,CAACA,IAAL,CAAUA,IAAhD;YACAI,YAAY,CAACC,UAAb,CAAwB,MAAxB;YACAD,YAAY,CAACE,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeR,IAAI,CAACA,IAAL,CAAUA,IAAzB,EAA+B,CAAC,OAAD,EAAU,aAAV,EAAyB,cAAzB,CAA/B,CAA7B;YACAF,eAAe,CAACW,OAAhB,CAAwB,eAAxB,IAA4C,UAASP,WAAY,EAAjE;YACAJ,eAAe,CAACW,OAAhB,CAAwB,cAAxB,IAA0CN,YAA1C;YACA,OAAO,MAAMlB,MAAM,CAACyB,OAAP,CAAeZ,eAAf,CAAb,CANsB,CAMwB;UAC/C;QACF,CAbD,CAaE,OAAOF,KAAP,EAAc;UACd;UACAQ,YAAY,CAACC,UAAb,CAAwB,MAAxB;UACAb,QAAQ,CAAC,QAAD,EAAW;YAAEmB,OAAO,EAAE;UAAX,CAAX,CAAR;UACA;QACD;MACF,CArBoB,CAsBrB;;;MACA,OAAOC,OAAO,CAACC,MAAR,CAAejB,KAAf,CAAP;IACD,CA7BH;EA+BD,CAhCQ,EAgCN,EAhCM,CAAT;EAiCA,OAAOL,QAAP;AACD,CArCD;;GAAMD,W;UACaN,W;;;KADbM,W;AAwCN,eAAeL,MAAf;AACA,SAAQK,WAAR"},"metadata":{},"sourceType":"module"}