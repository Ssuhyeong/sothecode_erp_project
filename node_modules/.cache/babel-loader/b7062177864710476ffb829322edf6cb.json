{"ast":null,"code":"import axios from 'axios';\nconst client = axios.create({\n  baseURL: '127.0.0.1',\n  timeout: 1000\n});\nclient.interceptors.request.use(function (config) {\n  const user = localStorage.getItem('user');\n\n  if (!user) {\n    config.headers[\"Authorization\"] = null;\n    config.headers[\"refreshToken\"] = null;\n    return config;\n  }\n\n  const {\n    accessToken,\n    refreshToken\n  } = JSON.parse(user);\n  config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\n  config.headers[\"refreshToken\"] = refreshToken;\n  return config;\n});\nclient.interceptors.response.use(function (response) {\n  return response;\n}, async function (error) {\n  if (error.response && error.response.status === 401) {\n    try {\n      //  엑세스 토큰 만료\n      const originalRequest = error.config;\n      const data = await client.post('/refresh');\n\n      if (data.status == 201) {\n        // 엑세스만 재발행\n        const {\n          accessToken,\n          refreshToken\n        } = data.data.data;\n        localStorage.removeItem('user');\n        localStorage.setItem('user', JSON.stringify(data.data.data, ['accessToken', 'refreshToken']));\n        originalRequest.headers['Authorization'] = `Bearer ${accessToken}`;\n        originalRequest.headers['refreshToken'] = refreshToken;\n        return await client.request(originalRequest); // 재설정 및 원래 리퀘스트 \n      }\n    } catch (error) {\n      // [/refresh] 에서오는 에러 코드\n      localStorage.removeItem('user');\n      return Promise.reject(error);\n    }\n  } //  [/api (jwt_verify)]에서 오는 에러 코드  or 기존 요청 에러 코드\n\n\n  return Promise.reject(error);\n});\nexport default client;","map":{"version":3,"names":["axios","client","create","baseURL","timeout","interceptors","request","use","config","user","localStorage","getItem","headers","accessToken","refreshToken","JSON","parse","response","error","status","originalRequest","data","post","removeItem","setItem","stringify","Promise","reject"],"sources":["/home/song/serp_front/src/utils/axios api.js"],"sourcesContent":["import axios from 'axios';\n\nconst client = axios.create(\n  {\n    baseURL: '127.0.0.1',\n    timeout: 1000,\n  }\n);\n\nclient.interceptors.request.use(\n  function (config) {\n    const user = localStorage.getItem('user');\n    if (!user) {\n      config.headers[\"Authorization\"] = null;\n      config.headers[\"refreshToken\"] = null;\n      return config\n    }\n    const { accessToken, refreshToken } = JSON.parse(user)\n    config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\n    config.headers[\"refreshToken\"] = refreshToken;\n    return config\n  }\n)\n\nclient.interceptors.response.use(\n  function (response) {\n    return response\n  },\n  async function (error) {\n    if (error.response && error.response.status === 401) {\n      try {\n        //  엑세스 토큰 만료\n        const originalRequest = error.config;\n        const data = await client.post('/refresh')\n\n        if (data.status == 201) { // 엑세스만 재발행\n          const { accessToken, refreshToken } = data.data.data\n          localStorage.removeItem('user')\n          localStorage.setItem('user', JSON.stringify(data.data.data, ['accessToken', 'refreshToken']))\n          originalRequest.headers['Authorization'] = `Bearer ${accessToken}`;\n          originalRequest.headers['refreshToken'] = refreshToken;\n          return await client.request(originalRequest); // 재설정 및 원래 리퀘스트 \n        }\n      } catch (error) {\n        // [/refresh] 에서오는 에러 코드\n        localStorage.removeItem('user');\n        return Promise.reject(error)\n      }\n    }\n    //  [/api (jwt_verify)]에서 오는 에러 코드  or 기존 요청 에러 코드\n    return Promise.reject(error) \n  }\n)\n\n\n\nexport default client;\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,MAAM,GAAGD,KAAK,CAACE,MAAN,CACb;EACEC,OAAO,EAAE,WADX;EAEEC,OAAO,EAAE;AAFX,CADa,CAAf;AAOAH,MAAM,CAACI,YAAP,CAAoBC,OAApB,CAA4BC,GAA5B,CACE,UAAUC,MAAV,EAAkB;EAChB,MAAMC,IAAI,GAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAb;;EACA,IAAI,CAACF,IAAL,EAAW;IACTD,MAAM,CAACI,OAAP,CAAe,eAAf,IAAkC,IAAlC;IACAJ,MAAM,CAACI,OAAP,CAAe,cAAf,IAAiC,IAAjC;IACA,OAAOJ,MAAP;EACD;;EACD,MAAM;IAAEK,WAAF;IAAeC;EAAf,IAAgCC,IAAI,CAACC,KAAL,CAAWP,IAAX,CAAtC;EACAD,MAAM,CAACI,OAAP,CAAe,eAAf,IAAmC,UAASC,WAAY,EAAxD;EACAL,MAAM,CAACI,OAAP,CAAe,cAAf,IAAiCE,YAAjC;EACA,OAAON,MAAP;AACD,CAZH;AAeAP,MAAM,CAACI,YAAP,CAAoBY,QAApB,CAA6BV,GAA7B,CACE,UAAUU,QAAV,EAAoB;EAClB,OAAOA,QAAP;AACD,CAHH,EAIE,gBAAgBC,KAAhB,EAAuB;EACrB,IAAIA,KAAK,CAACD,QAAN,IAAkBC,KAAK,CAACD,QAAN,CAAeE,MAAf,KAA0B,GAAhD,EAAqD;IACnD,IAAI;MACF;MACA,MAAMC,eAAe,GAAGF,KAAK,CAACV,MAA9B;MACA,MAAMa,IAAI,GAAG,MAAMpB,MAAM,CAACqB,IAAP,CAAY,UAAZ,CAAnB;;MAEA,IAAID,IAAI,CAACF,MAAL,IAAe,GAAnB,EAAwB;QAAE;QACxB,MAAM;UAAEN,WAAF;UAAeC;QAAf,IAAgCO,IAAI,CAACA,IAAL,CAAUA,IAAhD;QACAX,YAAY,CAACa,UAAb,CAAwB,MAAxB;QACAb,YAAY,CAACc,OAAb,CAAqB,MAArB,EAA6BT,IAAI,CAACU,SAAL,CAAeJ,IAAI,CAACA,IAAL,CAAUA,IAAzB,EAA+B,CAAC,aAAD,EAAgB,cAAhB,CAA/B,CAA7B;QACAD,eAAe,CAACR,OAAhB,CAAwB,eAAxB,IAA4C,UAASC,WAAY,EAAjE;QACAO,eAAe,CAACR,OAAhB,CAAwB,cAAxB,IAA0CE,YAA1C;QACA,OAAO,MAAMb,MAAM,CAACK,OAAP,CAAec,eAAf,CAAb,CANsB,CAMwB;MAC/C;IACF,CAbD,CAaE,OAAOF,KAAP,EAAc;MACd;MACAR,YAAY,CAACa,UAAb,CAAwB,MAAxB;MACA,OAAOG,OAAO,CAACC,MAAR,CAAeT,KAAf,CAAP;IACD;EACF,CApBoB,CAqBrB;;;EACA,OAAOQ,OAAO,CAACC,MAAR,CAAeT,KAAf,CAAP;AACD,CA3BH;AAgCA,eAAejB,MAAf"},"metadata":{},"sourceType":"module"}