{"ast":null,"code":"import client from 'src/utils/axios_api';\n\nconst SetupInterceptors = navigate => {\n  client.interceptors.response.use(function (response) {\n    return response;\n  }, async function (error) {\n    if (error.response && error.response.status === 401) {\n      try {\n        //  엑세스 토큰 만료\n        const originalRequest = error.config;\n        const data = await client.post('/refresh');\n\n        if (data.status == 201) {\n          // 엑세스만 재발행\n          const {\n            accessToken,\n            refreshToken\n          } = data.data.data;\n          localStorage.removeItem('user');\n          localStorage.setItem('user', JSON.stringify(data.data.data, ['accessToken', 'refreshToken']));\n          originalRequest.headers['Authorization'] = `Bearer ${accessToken}`;\n          originalRequest.headers['refreshToken'] = refreshToken;\n          return await client.request(originalRequest); // 재설정 및 원래 리퀘스트 \n        }\n      } catch (error) {\n        // [/refresh] 토큰 만료 또는 토큰 비정상 또는 헤더 없음\n        // 로그인 으로\n        localStorage.removeItem('user');\n        navigate('/login');\n        return Promise.reject(error);\n      }\n    } //  [/api (jwt_verify)]에서 오는 에러 코드  or 기존 요청 에러 코드\n\n\n    return Promise.reject(error);\n  });\n};\n\n_c = SetupInterceptors;\nexport default axios_Interceptors;\n\nvar _c;\n\n$RefreshReg$(_c, \"SetupInterceptors\");","map":{"version":3,"names":["client","SetupInterceptors","navigate","interceptors","response","use","error","status","originalRequest","config","data","post","accessToken","refreshToken","localStorage","removeItem","setItem","JSON","stringify","headers","request","Promise","reject","axios_Interceptors"],"sources":["/home/song/serp_front/src/utils/SetupInterceptors.js"],"sourcesContent":["import client from 'src/utils/axios_api'\r\n\r\nconst SetupInterceptors = (navigate) => {\r\n    client.interceptors.response.use(\r\n        function (response) {\r\n          return response\r\n        },\r\n        async function (error) {\r\n          if (error.response && error.response.status === 401) {\r\n            try {\r\n              //  엑세스 토큰 만료\r\n              const originalRequest = error.config;\r\n              const data = await client.post('/refresh')\r\n      \r\n              if (data.status == 201) { // 엑세스만 재발행\r\n                const { accessToken, refreshToken } = data.data.data\r\n                localStorage.removeItem('user')\r\n                localStorage.setItem('user', JSON.stringify(data.data.data, ['accessToken', 'refreshToken']))\r\n                originalRequest.headers['Authorization'] = `Bearer ${accessToken}`;\r\n                originalRequest.headers['refreshToken'] = refreshToken;\r\n                return await client.request(originalRequest); // 재설정 및 원래 리퀘스트 \r\n              }\r\n            } catch (error) {\r\n              // [/refresh] 토큰 만료 또는 토큰 비정상 또는 헤더 없음\r\n              // 로그인 으로\r\n              localStorage.removeItem('user');\r\n              navigate('/login');\r\n              return Promise.reject(error)\r\n            }\r\n          }\r\n          //  [/api (jwt_verify)]에서 오는 에러 코드  or 기존 요청 에러 코드\r\n          return Promise.reject(error) \r\n        }\r\n      )\r\n};\r\n\r\nexport default axios_Interceptors;"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,qBAAnB;;AAEA,MAAMC,iBAAiB,GAAIC,QAAD,IAAc;EACpCF,MAAM,CAACG,YAAP,CAAoBC,QAApB,CAA6BC,GAA7B,CACI,UAAUD,QAAV,EAAoB;IAClB,OAAOA,QAAP;EACD,CAHL,EAII,gBAAgBE,KAAhB,EAAuB;IACrB,IAAIA,KAAK,CAACF,QAAN,IAAkBE,KAAK,CAACF,QAAN,CAAeG,MAAf,KAA0B,GAAhD,EAAqD;MACnD,IAAI;QACF;QACA,MAAMC,eAAe,GAAGF,KAAK,CAACG,MAA9B;QACA,MAAMC,IAAI,GAAG,MAAMV,MAAM,CAACW,IAAP,CAAY,UAAZ,CAAnB;;QAEA,IAAID,IAAI,CAACH,MAAL,IAAe,GAAnB,EAAwB;UAAE;UACxB,MAAM;YAAEK,WAAF;YAAeC;UAAf,IAAgCH,IAAI,CAACA,IAAL,CAAUA,IAAhD;UACAI,YAAY,CAACC,UAAb,CAAwB,MAAxB;UACAD,YAAY,CAACE,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeR,IAAI,CAACA,IAAL,CAAUA,IAAzB,EAA+B,CAAC,aAAD,EAAgB,cAAhB,CAA/B,CAA7B;UACAF,eAAe,CAACW,OAAhB,CAAwB,eAAxB,IAA4C,UAASP,WAAY,EAAjE;UACAJ,eAAe,CAACW,OAAhB,CAAwB,cAAxB,IAA0CN,YAA1C;UACA,OAAO,MAAMb,MAAM,CAACoB,OAAP,CAAeZ,eAAf,CAAb,CANsB,CAMwB;QAC/C;MACF,CAbD,CAaE,OAAOF,KAAP,EAAc;QACd;QACA;QACAQ,YAAY,CAACC,UAAb,CAAwB,MAAxB;QACAb,QAAQ,CAAC,QAAD,CAAR;QACA,OAAOmB,OAAO,CAACC,MAAR,CAAehB,KAAf,CAAP;MACD;IACF,CAtBoB,CAuBrB;;;IACA,OAAOe,OAAO,CAACC,MAAR,CAAehB,KAAf,CAAP;EACD,CA7BL;AA+BH,CAhCD;;KAAML,iB;AAkCN,eAAesB,kBAAf"},"metadata":{},"sourceType":"module"}