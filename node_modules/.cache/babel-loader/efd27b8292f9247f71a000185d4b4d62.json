{"ast":null,"code":"var _jsxFileName = \"/home/song/serp_front/src/routes.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useRoutes } from \"react-router-dom\";\nimport LoginGuard from 'src/components/LoginGuard';\nimport RouterGuard from 'src/components/RouterGuard';\nimport DashboardLayout from 'src/layouts/DashboardLayout';\nimport MenuView from 'src/views/errors/NotFoundView';\nimport CompanyInfoView from 'src/views/menu/CompanyInfoView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  let element = useRoutes([// Route에서 사용하는 props의 요소들과 동일\n  {\n    path: \"/\",\n    element: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 27\n    }, this)\n  }, {\n    path: \"dashboard\",\n    element: /*#__PURE__*/_jsxDEV(Dashboard, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 35\n    }, this)\n  }, {\n    path: \"invoices\",\n    element: /*#__PURE__*/_jsxDEV(Invoices, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 16\n    }, this),\n    // 중첩 라우트의 경우도 Route에서와 같이 children이라는 property를 사용\n    children: [{\n      path: \":id\",\n      element: /*#__PURE__*/_jsxDEV(Invoice, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 33\n      }, this)\n    }, {\n      path: \"sent\",\n      element: /*#__PURE__*/_jsxDEV(SentInvoices, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 34\n      }, this)\n    }]\n  }, // NotFound 페이지는 다음과 같이 구현할 수 있음\n  {\n    path: \"*\",\n    element: /*#__PURE__*/_jsxDEV(NotFound, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 27\n    }, this)\n  }]); // element를 return함으로써 적절한 계층으로 구성된 element가 렌더링 될 수 있도록 함\n\n  return element;\n} // const routes  = () => {\n//   const element = useRoutes([\n//     {\n//       path: \"/\",\n//       element: <MenuView />,\n//     }\n//   ]);\n//   return ( {element });\n// }\n// export default routes;\n// <React.Suspense fallback={<div>Loading...</div>}>\n//   <Routes>\n//     {\n//       routes.map((route, i) => {\n//         const RouteElement = route.element;\n//         const RouteLayout = route.layout || React.Fragment\n//         const RouteGuard = route.guard || React.Fragment;\n//         return (\n//           <Route key={i} path={route.path}\n//             element={\n//               <RouteGuard>\n//                 <RouteLayout>\n//                   <RouteElement />\n//                 </RouteLayout>\n//               </RouteGuard>\n//             }>\n//           </Route>\n//         )\n//       })\n//     }\n//   </Routes>\n// </React.Suspense>\n// export const routes = [\n//   {\n//     path: '/404',\n//     guard: RouterGuard,\n//     element: React.lazy(() => import('src/views/errors/NotFoundView')),\n//   },\n//   {\n//     path: '/login',\n//     guard: RouterGuard,\n//     element: React.lazy(() => import('src/views/signIn')),\n//   },\n//   // customize  routes\n//   {\n//     path: '/memu/*',\n//     guard: LoginGuard,\n//     layout: DashboardLayout,\n//     element: React.lazy(() => import('src/views/menu')),\n//     childs: [\n//       {\n//         path: '/CompanyInfo',\n//         element: React.lazy(() => import('src/views/menu/CompanyInfoView')),\n//       },\n//     ]\n//   },\n//   // define [redirect(=Navigate )]\n//   {\n//     path: \"/\",\n//     element: () => <Navigate replace to=\"/memu\" />\n//   },\n//   {\n//     path: \"/*\",\n//     element: () => <Navigate replace to=\"/404\" />\n//   }\n// ];\n\n\n_s(App, \"etFarxWlkZhRrhKgVVEzJqrjurQ=\", false, function () {\n  return [useRoutes];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useRoutes","LoginGuard","RouterGuard","DashboardLayout","MenuView","CompanyInfoView","App","element","path","children"],"sources":["/home/song/serp_front/src/routes.js"],"sourcesContent":["import React from 'react';\nimport { useRoutes } from \"react-router-dom\";\n\n\nimport LoginGuard from 'src/components/LoginGuard';\nimport RouterGuard from 'src/components/RouterGuard';\nimport DashboardLayout from 'src/layouts/DashboardLayout';\n\nimport MenuView from 'src/views/errors/NotFoundView';\nimport CompanyInfoView from 'src/views/menu/CompanyInfoView';\n\n\nfunction App() {\n  let element = useRoutes([\n\t\t// Route에서 사용하는 props의 요소들과 동일\n    { path: \"/\", element: <Home /> },\n    { path: \"dashboard\", element: <Dashboard /> },\n    {\n      path: \"invoices\",\n      element: <Invoices />,\n\t\t\t// 중첩 라우트의 경우도 Route에서와 같이 children이라는 property를 사용\n      children: [\n        { path: \":id\", element: <Invoice /> },\n        { path: \"sent\", element: <SentInvoices /> }\n      ]\n    },\n\t\t// NotFound 페이지는 다음과 같이 구현할 수 있음\n    { path: \"*\", element: <NotFound /> }\n  ]);\n\t\n\t// element를 return함으로써 적절한 계층으로 구성된 element가 렌더링 될 수 있도록 함\n  return element;\n}\n\n// const routes  = () => {\n//   const element = useRoutes([\n//     {\n//       path: \"/\",\n//       element: <MenuView />,\n//     }\n//   ]);\n\n//   return ( {element });\n// }\n// export default routes;\n\n\n\n  // <React.Suspense fallback={<div>Loading...</div>}>\n  //   <Routes>\n  //     {\n  //       routes.map((route, i) => {\n  //         const RouteElement = route.element;\n  //         const RouteLayout = route.layout || React.Fragment\n  //         const RouteGuard = route.guard || React.Fragment;\n\n  //         return (\n  //           <Route key={i} path={route.path}\n  //             element={\n  //               <RouteGuard>\n  //                 <RouteLayout>\n  //                   <RouteElement />\n  //                 </RouteLayout>\n  //               </RouteGuard>\n  //             }>\n  //           </Route>\n  //         )\n  //       })\n  //     }\n  //   </Routes>\n  // </React.Suspense>\n\n\n\n// export const routes = [\n\n//   {\n//     path: '/404',\n//     guard: RouterGuard,\n//     element: React.lazy(() => import('src/views/errors/NotFoundView')),\n//   },\n//   {\n//     path: '/login',\n//     guard: RouterGuard,\n//     element: React.lazy(() => import('src/views/signIn')),\n//   },\n//   // customize  routes\n//   {\n//     path: '/memu/*',\n//     guard: LoginGuard,\n//     layout: DashboardLayout,\n//     element: React.lazy(() => import('src/views/menu')),\n    \n//     childs: [\n//       {\n//         path: '/CompanyInfo',\n//         element: React.lazy(() => import('src/views/menu/CompanyInfoView')),\n//       },\n//     ]\n//   },\n\n\n\n//   // define [redirect(=Navigate )]\n//   {\n//     path: \"/\",\n//     element: () => <Navigate replace to=\"/memu\" />\n//   },\n//   {\n//     path: \"/*\",\n//     element: () => <Navigate replace to=\"/404\" />\n//   }\n// ];"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,kBAA1B;AAGA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,eAAP,MAA4B,6BAA5B;AAEA,OAAOC,QAAP,MAAqB,+BAArB;AACA,OAAOC,eAAP,MAA4B,gCAA5B;;;AAGA,SAASC,GAAT,GAAe;EAAA;;EACb,IAAIC,OAAO,GAAGP,SAAS,CAAC,CACxB;EACE;IAAEQ,IAAI,EAAE,GAAR;IAAaD,OAAO,eAAE,QAAC,IAAD;MAAA;MAAA;MAAA;IAAA;EAAtB,CAFsB,EAGtB;IAAEC,IAAI,EAAE,WAAR;IAAqBD,OAAO,eAAE,QAAC,SAAD;MAAA;MAAA;MAAA;IAAA;EAA9B,CAHsB,EAItB;IACEC,IAAI,EAAE,UADR;IAEED,OAAO,eAAE,QAAC,QAAD;MAAA;MAAA;MAAA;IAAA,QAFX;IAGD;IACGE,QAAQ,EAAE,CACR;MAAED,IAAI,EAAE,KAAR;MAAeD,OAAO,eAAE,QAAC,OAAD;QAAA;QAAA;QAAA;MAAA;IAAxB,CADQ,EAER;MAAEC,IAAI,EAAE,MAAR;MAAgBD,OAAO,eAAE,QAAC,YAAD;QAAA;QAAA;QAAA;MAAA;IAAzB,CAFQ;EAJZ,CAJsB,EAaxB;EACE;IAAEC,IAAI,EAAE,GAAR;IAAaD,OAAO,eAAE,QAAC,QAAD;MAAA;MAAA;MAAA;IAAA;EAAtB,CAdsB,CAAD,CAAvB,CADa,CAkBd;;EACC,OAAOA,OAAP;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIE;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIF;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GApGSD,G;UACON,S;;;KADPM,G"},"metadata":{},"sourceType":"module"}